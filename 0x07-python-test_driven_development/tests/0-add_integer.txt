Step by step on how to use 0-add_integer.py module
==================================================

The 0-add_integer.py module contains a function that adds two integers. The values passed
to the functions must be integers or floats. The errors should be TypeError
on failure to pass integers or floats

Importing the function from the module:
	  >>> add_integer = __import__("0-add_integer").add_integer

Checking Module Docstring:
	 >>> mod_docstr = __import__("0-add_integer").__doc__
	 >>> len(mod_docstr) > 1
	 True

Checking for function Docstring:
	 >>> fxn_docstr = __import__("0-add_integer").add_integer.__doc__
	 >>> len(fxn_docstr) > 1
	 True

Checking the addition of positive integer:
	 >>> add_integer(5, 6)
	 11

Checking the addition of negative and positive numbers:
	 >>> add_integer(-4, 2)
	 -2

Checking the addition of positive and negative numbers:
         >>> add_integer(3, 7)
         10

Checking the addition of a float with an int:
	 >>> add_integer(1.3, 8)
	 9

Checking the addition of an int with a float:
	 >>> add_integer(5, 3.5)
	 8

Checking addition of two floats:
	 >>> add_integer(3.5, 3.9)
	 6

Checking addition over multiple values:
	 >>> [add_integer(i, i * 2) for i in range(5)]
	 [0, 3, 6, 9, 12, 15]

Checking for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Checking for passed infinity:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer

Checking super long int:
	 >>> add_integer(7777777777777777777777777777777777777777, 2)
	 7777777777777777777777777777777777777779

Checking addition of a non-number and number:
	 >>> add_integer('a', 5)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Checking addition of a number with a non-number:
	 >>> add_integer(9, [2])
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Checking addition of two non-numbers:
	 >>> add_integer([6], {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Checking no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 1 required positional argument: 'a'

Checking one arg:
	 >>> add_integer(1)
	 Traceback (most recent call last):
         ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'

Checking more than 2 args:
	 >>> add_integer(1, 2, 4)
         Traceback (most recent call last):
         ...
	 TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Checking bool with number:
	 >>> add_integer(True, 7)
	 Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Checking number with bool:
	 >>> add_integer(6, False)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer
